{"version":3,"file":"static/js/316.1477059e.chunk.js","mappings":"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","sources":["webpack://wallet-reactor/./src/components/HomeTab/HomeTab.module.scss?60d0","redux/transactionCategories/transactionCategoriesSelectors.js","assets/lang/langOptionsHomeTab.js","components/HomeTab/HomeTab.jsx","components/ButtonAddTransactions/ButtonAddTransactions.jsx","webpack://wallet-reactor/./src/components/ModalAddTransaction/ModalAddTransaction.module.scss?a1ea","webpack://wallet-reactor/./src/components/ModalAddTransaction/FormAddTransaction.module.scss?e07b","assets/lang/langOptionsModalAddTransaction.js","components/ModalAddTransaction/ModalAddTransaction.jsx","hook/modalAddTransaction.js","pages/HomePage/HomePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tableWrap\":\"HomeTab_tableWrap__wldLt\",\"scrollTableBody\":\"HomeTab_scrollTableBody__k4rOg\",\"scrollTable\":\"HomeTab_scrollTable__e2cbs\",\"tableWrapMob\":\"HomeTab_tableWrapMob__7DKqt\",\"scrollTableBodyMob\":\"HomeTab_scrollTableBodyMob__+X8ln\",\"scrollTableMob\":\"HomeTab_scrollTableMob__avbAf\",\"tablePositive\":\"HomeTab_tablePositive__06bCy\",\"positive\":\"HomeTab_positive__mmZ63\",\"negative\":\"HomeTab_negative__pTkgl\",\"scrollTableBtn\":\"HomeTab_scrollTableBtn__n5d6c\",\"scrollTableBtnMob\":\"HomeTab_scrollTableBtnMob__gvIkC\"};","export const selectTransactionCategories = state =>\n  state.transactionCategories.items;\nexport const selectTransactionIsLoading = state =>\n  state.transactionCategories.isLoading;\n","export const langOptionsHomeTab = {\n  DataText: {\n    ua: \"Дата\",\n    en: \"Data\",\n  },\n  TypeText: {\n    ua: \"Тип\",\n    en: \"Type\",\n  },\n  CategoryText: {\n    ua: \"Категорiя\",\n    en: \"Category\",\n  },\n  CommentText: {\n    ua: \"Коментар\",\n    en: \"Comment\",\n  },\n  SumText: {\n    ua: \"Сума\",\n    en: \"Sum\",\n  },\n  BalanceText: {\n    ua: \"Баланс\",\n    en: \"Balance\",\n  },\n  NoTransactionsText: {\n    ua: \"Немає транзакцiй\",\n    en: \"No transactions\",\n  },\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport s from './HomeTab.module.scss';\nimport { selectTransactions } from 'redux/transactions/transactionsSelectors';\nimport { useMedia } from 'react-use';\nimport { selectTransactionCategories } from 'redux/transactionCategories/transactionCategoriesSelectors';\nimport { getLang } from 'redux/lang/langSelector';\nimport { langOptionsHomeTab } from '../../assets/lang/langOptionsHomeTab';\nimport { getTheme } from '../../redux/theme/themeSelector';\nimport { BsFillTrashFill } from 'react-icons/bs';\nimport { deleteTransaction } from 'redux/transactions/transactionsOperations';\nimport { changeBalance } from 'redux/auth/auth-slice';\n\nexport const HomeTab = () => {\n  const transactions = useSelector(selectTransactions);\n  const categories = useSelector(selectTransactionCategories);\n  const categoriesList = categories.map(data => data);\n  const isMobile = useMedia('(max-width: 767px)');\n  const isLaptop = useMedia('(min-width: 768px)');\n  const transactionsReverse = [...transactions];\n  const dispatch = useDispatch();\n\n  const lang = useSelector(getLang);\n  const {\n    DataText,\n    TypeText,\n    CategoryText,\n    CommentText,\n    SumText,\n    BalanceText,\n    NoTransactionsText,\n  } = langOptionsHomeTab;\n  const theme = useSelector(getTheme);\n\n  const onDelete = (id, amount) => {\n    dispatch(deleteTransaction(id));\n    dispatch(changeBalance(amount));\n  };\n\n  return (\n    <>\n      {isMobile && (\n        <div className={s.tableWrapMob}>\n          <div className={s.scrollTableMob}>\n            <div className={s.scrollTableBodyMob}>\n              {transactions.length !== 0 ? (\n                transactionsReverse\n                  .reverse()\n                  .sort(\n                    (a, b) =>\n                      new Date(b.transactionDate) - new Date(a.transactionDate)\n                  )\n                  .map(el => (\n                    <table\n                      className={\n                        el.amount > 0 ? s.tablePositive : s.tableNegative\n                      }\n                      key={el.id}\n                    >\n                      <tbody>\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {DataText[lang]}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {el.transactionDate}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {TypeText[lang]}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {el.type !== 'EXPENSE' ? '+' : '-'}\n                          </td>\n                        </tr>\n\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {CategoryText[lang]}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {categoriesList.length &&\n                              categoriesList.find(\n                                cat => cat.id === el.categoryId\n                              ).name}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {CommentText[lang]}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {el.comment}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {SumText[lang]}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                            className={el.amount > 0 ? s.positive : s.negative}\n                          >\n                            {el.amount}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {BalanceText[lang]}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                theme === 'light'\n                                  ? ''\n                                  : 'var(--dark-mood-form-color)',\n                            }}\n                          >\n                            {el.balanceAfter}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td colspan=\"2\">\n                            <button\n                              type=\"button\"\n                              className={s.scrollTableBtnMob}\n                              onClick={() => onDelete(el.id)}\n                            >\n                              Delete\n                            </button>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  ))\n              ) : (\n                <p>{NoTransactionsText[lang]}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {isLaptop && (\n        <div className={s.tableWrap}>\n          <div className={s.scrollTable}>\n            <table>\n              <thead>\n                <tr>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  >\n                    {DataText[lang]}\n                  </th>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  >\n                    {TypeText[lang]}\n                  </th>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  >\n                    {CategoryText[lang]}\n                  </th>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  >\n                    {CommentText[lang]}\n                  </th>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  >\n                    {SumText[lang]}\n                  </th>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  >\n                    {BalanceText[lang]}\n                  </th>\n                  <th\n                    style={{\n                      backgroundColor:\n                        theme === 'light' ? '' : 'var(--dark-mood-form-color)',\n                      color:\n                        theme === 'light'\n                          ? 'var(--title-black-color)'\n                          : 'var(--text-white-color)',\n                    }}\n                  ></th>\n                </tr>\n              </thead>\n            </table>\n\n            <div className={s.scrollTableBody}>\n              <table>\n                <tbody>\n                  {transactions.length ? (\n                    transactionsReverse\n                      .reverse()\n                      .sort(\n                        (a, b) =>\n                          new Date(b.transactionDate) -\n                          new Date(a.transactionDate)\n                      )\n                      .map(el => (\n                        <tr key={el.id}>\n                          <td>{el.transactionDate}</td>\n                          <td>{el.type !== 'EXPENSE' ? '+' : '-'}</td>\n                          <td>\n                            {categoriesList.length &&\n                              categoriesList.find(\n                                cat => cat.id === el.categoryId\n                              ).name}\n                          </td>\n                          <td>{el.comment}</td>\n                          <td\n                            className={el.amount > 0 ? s.positive : s.negative}\n                          >\n                            {el.amount}\n                          </td>\n                          <td>{el.balanceAfter}</td>\n                          <td>\n                            <button\n                              type=\"button\"\n                              onClick={() => onDelete(el.id, el.amount)}\n                              className={s.scrollTableBtn}\n                            >\n                              <BsFillTrashFill style={{ fill: '#fff' }} />\n                            </button>\n                          </td>\n                        </tr>\n                      ))\n                  ) : (\n                    <tr>\n                      <td>{NoTransactionsText[lang]}</td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","export const ButtonAddTransactions = ({ onModalOpen }) => {\n  return (\n    <>\n      <button onClick={onModalOpen} type=\"button\">\n        Button Add Transactions\n      </button>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"ModalAddTransaction_Overlay__vLRSS\",\"Modal\":\"ModalAddTransaction_Modal__TxV0p\",\"loadedBloc\":\"ModalAddTransaction_loadedBloc__HOgXM\",\"loadedNone\":\"ModalAddTransaction_loadedNone__ufcKr\",\"container\":\"ModalAddTransaction_container__ctH3d\",\"hiddenInput\":\"ModalAddTransaction_hiddenInput__5li1C\",\"thumbContainer\":\"ModalAddTransaction_thumbContainer__vmn7-\",\"thumb\":\"ModalAddTransaction_thumb__m-wAw\",\"track\":\"ModalAddTransaction_track__ssBX2\"};","// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"FormAddTransaction_errorMessage__e0xpI\",\"titleForm\":\"FormAddTransaction_titleForm__IC8ko\",\"wraperSwitch\":\"FormAddTransaction_wraperSwitch__3mtec\",\"selectType\":\"FormAddTransaction_selectType__cZDI0\",\"selectTypeOption\":\"FormAddTransaction_selectTypeOption__zKC5G\",\"wraperAmountDate\":\"FormAddTransaction_wraperAmountDate__OOS4P\",\"inputAmount\":\"FormAddTransaction_inputAmount__63lHt\",\"inputDate\":\"FormAddTransaction_inputDate__tfEr3\",\"commentLabel\":\"FormAddTransaction_commentLabel__sShDm\",\"inputComment\":\"FormAddTransaction_inputComment__o60CH\",\"btnWraper\":\"FormAddTransaction_btnWraper__+vpSj\",\"btnAdd\":\"FormAddTransaction_btnAdd__2bF93\",\"btnCancel\":\"FormAddTransaction_btnCancel__L90Nx\",\"selectWraper\":\"FormAddTransaction_selectWraper__qzymS\",\"optionCustomWriper\":\"FormAddTransaction_optionCustomWriper__DvYLe\",\"selectCustom\":\"FormAddTransaction_selectCustom__6vGV2\",\"selectListWraper\":\"FormAddTransaction_selectListWraper__ePJo1\",\"selectLabel\":\"FormAddTransaction_selectLabel__RbdGb\",\"selectOptionItem\":\"FormAddTransaction_selectOptionItem__azR2X\"};","export const langOptionsModalAddTransaction = {\n  AddTransactionText: {\n    ua: \"Додати трансакцiю\",\n    en: \"Add transaction\",\n  },\n  CommentText: {\n    ua: \"Коментар\",\n    en: \"Comment\",\n  },\n  AddText: {\n    ua: \"Додати\",\n    en: \"ADD\",\n  },\n  CancelText: {\n    ua: \"Вiдмiнити\",\n    en: \"CANCEL\",\n  },\n};\n","//import PropTypes from 'prop-types';\nimport { authOperations } from 'redux/auth';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authSelectors } from 'redux/auth';\nimport { addTransaction } from 'redux/transactions/transactionsOperations';\nimport { selectTransactionCategories } from 'redux/transactionCategories/transactionCategoriesSelectors';\n\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport moment from 'moment';\n\nimport { fetchTransactionCategories } from 'redux/transactionCategories/transactionCategoriesOperations';\n\nimport { useToggle } from '../../hook/modalAddTransaction';\n\nimport css from './ModalAddTransaction.module.scss';\nimport cssForm from './FormAddTransaction.module.scss';\n\nimport { getLang } from 'redux/lang/langSelector';\nimport { langOptionsModalAddTransaction } from '../../assets/lang/langOptionsModalAddTransaction';\nimport { getTheme } from '../../redux/theme/themeSelector';\n\nexport const ModalAddTransaction = ({ closeModal }) => {\n  const dispatch = useDispatch();\n  const categories = useSelector(selectTransactionCategories);\n  const balance = useSelector(authSelectors.selectBalance);\n  const { isShowSelect, toggleHook } = useToggle();\n  // const { isShowSelect, show, hide, toggleHook } = useToggle();\n\n  // const [toggle, setToggle] = useState('');\n  const [amount, setAmount] = useState('');\n  const [valueDate, onChange] = useState(new Date());\n  const [transactionDate, setTransactionDate] = useState(\n    moment(valueDate).format()\n  );\n  const [comment, setComment] = useState('');\n  const [type, setType] = useState('INCOME');\n  const [categoryId, setCategoryId] = useState(\n    '063f1132-ba5d-42b4-951d-44011ca46262'\n  );\n  const [categoryTitle, setCategoryTitle] = useState('');\n  const [isShowSelectList, setIsShowSelectList] = useState('false');\n\n  const lang = useSelector(getLang);\n  const { AddTransactionText, CommentText, AddText, CancelText } = langOptionsModalAddTransaction;\n  const theme = useSelector(getTheme);\n\n  // const toggleShowSelectList = () =>\n  //   setIsShowSelectList(isShowSelectList => !isShowSelectList);\n\n  // console.log(balance);\n  // const total = 10;\n  useEffect(() => {\n    // show();\n    dispatch(fetchTransactionCategories());\n    const closeByEscape = ({ code }) => {\n      if (code === 'Escape') {\n        closeModal();\n      }\n    };\n    window.addEventListener('keydown', closeByEscape);\n\n    return () => {\n      window.removeEventListener('keydown', closeByEscape);\n    };\n  }, [closeModal, dispatch]);\n\n  const closeByBackdrop = event => {\n    if (event.currentTarget === event.target) {\n      closeModal();\n    }\n  };\n\n  // -----------------добавление и прочее\n\n  const onAddTransaction = transaction => {\n    dispatch(addTransaction({ ...transaction }));\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      // case 'toggle':\n      //   setToggle(value);\n      //   break;\n      case 'amount':\n        setAmount(value);\n\n        break;\n      case 'transactionDate':\n        setTransactionDate(value);\n        break;\n      case 'comment':\n        setComment(value);\n        break;\n      case 'categoryId':\n        setCategoryId(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    //если баланс = 3000\n\n    if (isShowSelect) {\n      // if (total - amount < 0)\n      if (amount > balance) {\n        return alert('Сумма больше, чем баланс. Введите нужную сумму');\n      }\n      const amount1 = -amount;\n      console.log(amount1);\n      onAddTransaction({\n        type,\n        categoryId,\n        amount: amount1,\n        transactionDate,\n        comment,\n      });\n      resetForm();\n      dispatch(authOperations.fetchCurrentUser());\n      return;\n    }\n\n    onAddTransaction({\n      type,\n      categoryId,\n      amount,\n      transactionDate,\n      comment,\n    });\n    dispatch(authOperations.fetchCurrentUser());\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setAmount('');\n    setComment('');\n  };\n\n  const handleCheckBox = e => {\n    if (isShowSelect) {\n      console.log(5);\n      setType('INCOME');\n      setCategoryId('063f1132-ba5d-42b4-951d-44011ca46262');\n      console.log(type);\n      console.log(amount);\n      //  hide();\n    }\n\n    if (!isShowSelect) {\n      console.log(6);\n      setType('EXPENSE');\n      console.log(type);\n\n      // show();\n    }\n\n    toggleHook();\n  };\n\n  // const categoriesExpense = categories.filter(\n  //   category => category.type !== 'INCOME'\n  // );\n  //нужно и это в переменную?\n\n  const handleClickOption = e => {\n    console.log(e.currentTarget.value);\n    setCategoryId(e.currentTarget.value);\n    setIsShowSelectList(true);\n  };\n  // const handleChangeSelectInput = () => {\n  //   setIsShowSelectList(true);\n  // };\n\n  let inputProps = {\n    name: 'transactionDate',\n  };\n\n  return (\n    <>\n      <div className={css.Overlay} onClick={closeByBackdrop}\n      style={{\n        backgroundColor: theme === \"light\" ? \"\" : \"var(--dark-mood-bg-color)\",\n        color: theme === 'light' ? 'var(--title-black-color)' : 'var(--text-white-color)', \n      }}\n      >\n        <div className={css.Modal}\n        style={{\n          backgroundColor: theme === \"light\" ? \"\" : \"var(--dark-mood-addForm-color)\" \n        }}\n        >\n          <h2 className={cssForm.titleForm}>{AddTransactionText[lang]}</h2>\n\n          <form autoComplete=\"off\" onSubmit={handleSubmit}>\n            <div className={cssForm.wraperSwitch}>\n              <label className={css.container}>\n                <input\n                  type=\"checkbox\"\n                  className={css.hiddenInput}\n                  id=\"hidden-input\"\n                  name=\"toggle\"\n                  // checked\n                  onClick={handleCheckBox}\n                />\n                <span className={css.thumbContainer}>\n                  <span className={css.thumb}></span>\n                </span>\n                <span className={css.track}></span>\n              </label>\n            </div>\n\n            {isShowSelect && (\n              <div className={cssForm.selectWraper}>\n                <ul className={cssForm.selectListWraper}>\n                  <input\n                    className={cssForm.selectCustom}\n                    name=\"categoryId\"\n                    type=\"button\"\n                    // type=\"hidden\"\n                    // onClick={handleSelectCustom}\n                    onClick={\n                      () => setIsShowSelectList(false)\n                      //toggleShowSelectList(true)\n                    }\n                    value={categoryTitle}\n                  />\n                  {!isShowSelectList && (\n                    <div className={cssForm.optionCustomWriper}>\n                      {categories\n                        .filter(category => category.type !== 'INCOME')\n                        .map(category => (\n                          <li\n                            key={`${category.id}`}\n                            // onClick={e => console.log(category.name)}\n                            onClick={() => setCategoryTitle(category.name)}\n                          >\n                            <label className={cssForm.selectLabel}>\n                              {`${category.name}`}\n                              <input\n                                className={cssForm.selectOptionItem}\n                                name=\"categoryId\"\n                                // type=\"hidden\"\n                                onClick={handleClickOption}\n                                onChange={handleChange}\n                                value={`${category.id}`}\n                              />\n                            </label>\n                          </li>\n                        ))}\n                    </div>\n                  )}\n                </ul>\n              </div>\n            )}\n\n            <div className={cssForm.wraperAmountDate}>\n              <label>\n                <input\n                  className={cssForm.inputAmount}\n                  name=\"amount\"\n                  // {if (isShowSelect) min}\n                  min=\"0\"\n                  placeholder=\"0.00\"\n                  value={amount}\n                  onChange={handleChange}\n                  // onChange={e => setAmount(e.target.value)}\n                />\n              </label>\n              {/* <label> */}\n              <Datetime\n                inputProps={inputProps}\n                value={valueDate}\n                onChange={onChange}\n                dateFormat=\"YYYY-MM-DD\"\n                timeFormat={false}\n                onClose={value => setTransactionDate(moment(value).format())}\n                closeOnSelect={true}\n                onNavigate={a => console.log(a)}\n                className={cssForm.inputDate}\n                name=\"transactionDate\"\n              />\n            </div>\n            <label className={cssForm.commentLabel}>\n              <input\n              style={{\n                backgroundColor: theme === \"light\" ? \"\" : \"var(--dark-mood-addForm-color)\" \n              }}\n                className={cssForm.inputComment}\n                type=\"text\"\n                name=\"comment\"\n                placeholder={CommentText[lang]}\n                value={comment}\n                onChange={handleChange}\n                //onChange={e => setComment(e.target.value)}\n              />\n            </label>\n            {/* select my */}\n            <div className={cssForm.btnWraper}>\n              <button className={cssForm.btnAdd} type=\"submit\">\n                {AddText[lang]}\n              </button>\n              <button className={cssForm.btnCancel} type=\"submit\">\n                {CancelText[lang]}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\n\nexport const useToggle = (initialState = false) => {\n  const [isShowSelect, setisShowSelect] = useState(initialState);\n\n  const show = () => setisShowSelect(true);\n  const hide = () => setisShowSelect(false);\n  const toggleHook = () => setisShowSelect(isShowSelect => !isShowSelect);\n\n  return {\n    isShowSelect,\n    show,\n    hide,\n    toggleHook,\n  };\n};\n","import {  useState } from 'react';\nimport { HomeTab } from 'components/HomeTab/HomeTab';\nimport { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\n\nconst HomePage = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return (\n    <>\n      <HomeTab />\n      <ButtonAddTransactions onModalOpen={openModal} />\n      {isModalOpen && <ModalAddTransaction closeModal={closeModal} />}\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["selectTransactionCategories","state","transactionCategories","items","langOptionsHomeTab","ua","en","HomeTab","transactions","useSelector","selectTransactions","categoriesList","map","data","isMobile","useMedia","isLaptop","transactionsReverse","dispatch","useDispatch","lang","getLang","DataText","TypeText","CategoryText","CommentText","SumText","BalanceText","NoTransactionsText","theme","getTheme","onDelete","id","amount","deleteTransaction","changeBalance","className","s","length","reverse","sort","a","b","Date","transactionDate","el","style","backgroundColor","type","find","cat","categoryId","name","comment","balanceAfter","colspan","onClick","color","fill","ButtonAddTransactions","onModalOpen","langOptionsModalAddTransaction","ModalAddTransaction","closeModal","categories","balance","authSelectors","initialState","useState","isShowSelect","setisShowSelect","toggleHook","show","hide","useToggle","setAmount","valueDate","onChange","moment","format","setTransactionDate","setComment","setType","setCategoryId","categoryTitle","setCategoryTitle","isShowSelectList","setIsShowSelectList","AddTransactionText","AddText","CancelText","useEffect","fetchTransactionCategories","closeByEscape","code","window","addEventListener","removeEventListener","onAddTransaction","transaction","addTransaction","handleChange","e","target","value","resetForm","handleClickOption","console","log","currentTarget","css","event","cssForm","autoComplete","onSubmit","preventDefault","alert","amount1","authOperations","filter","category","min","placeholder","inputProps","dateFormat","timeFormat","onClose","closeOnSelect","onNavigate","isModalOpen","setIsModalOpen"],"sourceRoot":""}